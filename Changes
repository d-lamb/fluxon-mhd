3-Apr-2008 [cd]
  - generated version 2.1
3-Apr-2008 [cd]
  - removed inline references	 
25-Mar-2008 [lr]
 - fixed rotation_spiro and modified duction to not print out the "./;"
1-Mar-2008 [lr]
 - made a new version of tree_walker (safe_tree_walker) that makes 
   a copy if the tree and then walks. this avoids any problems that 
   are caused when the function alters the tree itself as it is 
   walking along the tree. so far it is only applied to fluxon_update_ends.
27-Feb-2008 [lr]
 - added world_fluxon_length_check which makes sure that there aren't any fluxons of length 3.
 - added safe_tree_walker so that the tree can't change midway though the walk.
14-Nov-2007 [cd]
 - added _wdumblist (Flux.xs)
 - Combined _start and _end conditions for the plasmodi and open boundaries (model.c)
 - Made dumblists slightly less profligate in their memory usage (data.c)
 - Cleaned up new_world (data.c)
31-Oct-2007 [cd]
 - Perl interface more standardized; seems to avoid memory leaks 
 - Perl objects always work in through the World and tree_find; this
    avoids deallocation problems in (e.g.) cancellation or mesh refinement.
 - allocation concentrated in a Core routine
 - deallocation is somewhat faster and actually works
 - emerge/submerge code seems to work OK
 - All new structures are immediately linked into the world trees by the constructors.
29-Oct-2007 [cd]
 - Updates to force laws
 - Added emerge and cancel functions
 - Concentrations have an XS interface
 - Core structure
22-Oct-2007 [cd]
 - Added Core infrastructure
 - Added hash access to forces; also, helpful error messages
 - Added f_vertex5
 - Added line-tied vertex-management boundaries
 - Added default-boundary-condition infrastructure to World.
11-Oct-2007 [cd]
 - plasmoid reconnection code
 - some testing
9-Oct-2007 [cd]
 - Added auto-opening code, including U-loops
 - Added explicit non-crossing-photosphere test in stepping code
25-Sep-2007 [cd]
  - fixed vertex deallocation bug in fix_curvature.
24-Sep-2007 [cd]
  - f_vertex4 fix...
14-Sep-2007 [cd]
  - Added new vertex force, fixed a few bugs...
16-August-2007 [cd]
	- added a mask to prevent the first and last fluxels in a fluxon from 'seeing' the boundary condition images - this should prevent the vertical-field-at-boundary condition that we have been imposing.
14-July-2007 [lr] 
	-fixef f_vertex. there is now an f_vertex2. Realized that f_vertex didn't have the pseudo-foce where vertices are attracted to curvature. I have added that force in an tweaked the strengths of the 3 pseudo-forces in f_vertex2 to give good results.
23-May-2007 [cd]
  - added filter-by-fluxon to label option in renderer
22-May-2007 [cd]
  - added skew angle handling
  - added some label filtering in render (more to come).
16-May-2007 [cd]
  	-fixed energy access problem
17-April-2007 [lr] 
	-created new energy rouline, o_open which accounts for more of the open vertex energy. Works a little better than e_simple2, but still not what we expect.
1-Feb-2007 [lr]
	-Fixed e_simple2 to give the correct energy
16-Dec-2006 [cd]
	- Faster relaxation in near-relaxed conditions, using higher values of the 
	global flag to update_neighbors/update_mag
--- FLUX 1.1: 15-Dec-2006
1-Dec-2006 [cd]
	- Rendering impreovements: 
		-per-fluxon color & gradient specification
		-dip detection & marking
22-Aug-2006 [cd]
	-Finish linking flux concentrations into the hash-ref formalism
21-July-2006 [cd]
	-another fix to gather_neighbor_candidates
20-July-2006 [lr]
	-added e_simple2 which hasn't been verified yet
20-July-2006: [cd]
	- minor tweaks to gather_neighbor_candidates for optimal speed and 
	completeness...
20-July-2006: [cd]
	- added dup-avoiding unfiltered dumblist addition in model.c.  Now it
	  does seem to both be correct and run much faster. (about 2x)
19-July-2006: [cd]
	- Added unsorted-points hull routine (should be much faster)
12-July-2006: [lr & cd]
	- installed e_simple (test)
	- added energy method to World.pm
19-June-2006: [cd] 
	- fixed order-of-deref bug between tied hash and underlying
	blessed scalar.  No longer dumps core on exit.  (Bonus!)
14-June-2006: [cd]
	- Replaced explicit form-and-bless calls in many of the Vertex.xs 
	routines, with correct perl calls to the perl-side constructor. This
	eliminates a reference leak that was causing crashes.  Still get a
	segmentation fault on exit...
13-June-2006: [CD]
	- De-allocation is now in place.  Routine "free_world" seems to clean
up the whole data structure OK.  World freedom is linked into the perl side 
too, with a perl-like ref count mechanism -- when you deallocate all remaining 
references to a Flux object, it gets cleaned up.  There are still some problems
with global cleanup -- tends to dump core rather than exiting perl gracefully.
But everything seems to work OK in normal use.  No memory leaks observed 
when loading and displaying thousands of worlds.

2-June-2006: [LR]
	-added a lower threshold to fix_curvature. changed num returned to the difference between new and prev vertex total

31-May-2006:
	- Added rudimentary version information -- in $FLUX::file_versions.  It tells you the location, mod date, and size of each source file in the FLUX library.
	- clamped output step to minimum neighbor distance.
29-May-2006:
	- Clamped output step -- no vertex can move more than the distance to its nearest neighbor on the same fluxon.  This is to avoid some of the weirder anomalies from ds step scaling, but probably needs to use *all* neighbors rather than just fluxon buddies.
23-May-2006: 
	- Added a new force law -- f_pressure_equi2 -- that allows correct calculation without resorting to the kludge of running f_pressure_equi twice.
	- Fixed vertex deallocation (was a bug in dumblist_delete).
	- lots of updates in early 2006 - notably a tied-hash front end for
	  parameters on the perl side.  Painful but worth it.


21-Oct-2005: v. 1.1 updates:
	- Changes to the way that step scaling is controlled.  You can now set the
		power to which various parameters are raised to find the scaling factor
		at each node.
	- Perl interface has been updated: the principal structures all exist as tied hashes.
	  You can read (but not write) dumblists as perl lists.  All scalar and vector	
	  quantities are r/w.  For example,
		$a = read_world('pdl/menagerie/potential.flux');
		print $a->fluxon(200)->vertex(2)->{x};
			[-0.936 0.02 0.289]

	  

18-Aug-2004: checked-in to CVS.

