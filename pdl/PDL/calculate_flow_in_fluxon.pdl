use PDL::NiceSlice;
=head2 calculate_flow_in_fluxon

=for ref

Given a fluxon and some options, calculate the flow and density in the fluxon if it is open (or leave it blank if it is closed).

Returns a 3xN PDL, containing (r, vr, rho).  By default, it also updates these fields in the fluxon itself.

If the fluxon is doubly open or doubly closed or a plasmoid, return udnef.

=cut
use PDL::Options;

sub calculate_flow_in_fluxon {
    my $me = shift;
    my $u_opt = shift // {};

    # Define and append optional option input
    my %opt = parse( {
        steps => 500,
        g0 => 280,      # m/s^2
        r0 => 696e6,    # m
        v0 => 10,       # km/sec
        cs => 180,      # km/sec at 2e6K and fully ionized protons
                        },
                        $u_opt
        );

    # Check for start and ending points being open
    our $st_open = ($me->{fc_start}->{label}==-1);
    our $en_open = ($me->{fc_end}->{label}==-2);

    # Return undefined value if the given fluxon structure is labeled as a plasmoid, or if
    #   both ends are open
    return undef if( $me->{plasmoid} || ($st_open + $en_open != 1));

    # Pass options into local variables
    my $g0 = $opt{g0};
    my $r0 = $opt{r0};
    my $cs = $opt{cs} * 1e3; ## convert to m/s from km/s

    # Calculate array of positional radius and areas along the fluxon
    # Work along the correction direction depending on which end is open
    if($en_open) {
        our $r = ($me->dump_vecs->(0:2)**2)->sumover->sqrt * $opt{r0};
        our $A = pdl(map {$_->{A}} ($me->vertices)) * $opt{r0} * $opt{r0};
    } else {
        our $r = ($me->dump_vecs->(0:2,-1:0:-1)**2)->sumover->sqrt * $opt{r0};
        our $A = pdl(map { $_->{A}} ($me->vertices))->(-1:0:-1) * $opt{r0} * $opt{r0};
    }

    # Get rid of end anomalies
    # CL - Equating these values does make for some strange end/open point behavior later...
    $A->((0)) .= $A->((1));
    $A->((-1)) .= $A->((-2));

    # Define gravitational acceleration g as a function of radius
    our $g = $g0 * ($opt{r0} / $r)**2;

    # Define an expansion factor
    our $fr = $A / $A->((0)) * $opt{r0} * $opt{r0} / $r / $r;

    # Smooth slightly to remove numerical issues
    $fr->inplace->convolveND(pdl(1,2,3,2,1)/9,{bound=>'e'});
    our $dfr_dr = $fr->copy;

    # Calculate numerical derivatives
    $dfr_dr->(1:-2) .= ($fr->(2:-1) - $fr->(0:-3))/($r->(2:-1) - $r->(0:-3));
    $dfr_dr->(0) .= ($fr->(1) - $fr->(0)) / ($r->(1) - $fr->(0));
    $dfr_dr->(-1) .= ($fr->(-1) - $fr->(-2)) / ($r->(-1) - $r->(-2));

    # Chunk of code to calculate
    $dydx = sub {
        my $rnow = shift;
        my $vnow = shift;

        my $front = $vnow/$rnow;
        my $denominator = $cs * $cs  -  $vnow * $vnow;

        my $gnow = ($rnow->interpolate($r,$g))[0];
        my $frnow = ($rnow->interpolate($r,$fr))[0];
        my $dfr_drnow = ($rnow->interpolate($r,$dfr_dr))[0];

        my $numerator = $gnow * $rnow   -   2 * $cs * $cs * (  1   +   $rnow / 2 / $frnow * $dfr_drnow  );
        return ($front * $numerator / $denominator, $numerator, $denominator);
    };

    # Calculate average steps in r
    # CL - Is the average value here the right one to use?
    $dr = ($r->max - $r->min) / $opt{steps};

    # Define v0 and r0 values, and push into a list for storage
    @rv = ();
    $vnow = $opt{v0} * 1e3; # Convert to m/sec from km/sec
    $rnow = $r->minimum;
    push(@rv, pdl($rnow,$vnow));

    # Create some empty list for storage of numerators and denominators
    @num = ();
    @denom = ();

    # Stupid Eulerian steps: walk out to the end or to the first failed critical point.
    my ($dvdr, $oldnum, $olddenom) = &$dydx($rnow,$vnow);

    # Step along
    for($step=0; $step<$opt{steps};$step++){
        # Calculate dv/dr
        my ($dv, $num, $denom) = &$dydx($rnow,$vnow);
        # Advance values of r and v
        $rnow += $dr;
        $vnow += $dv * $dr;
        # Append numerator and denominator values to lists
        push(@num, $num);
        push(@denom, $denom);
        # Check for a change in sign of the denominator
        # Does this indicate v overtaking cs?
        if($denom * $olddenom < 0) {
            # Check that the numerator does *not* change in sign
            if($num * $oldnum > 0) {
                # Set vnow to NaN, and push r and v values to the list @rv
                $vnow = pdl(asin(1.1));
                push(@rv, pdl($rnow,$vnow));
                # Exit the stepping loop
                last;
            }
        }
        # Save old values for comparison with the next iteration
        $olddenom = $denom;
        $oldnum = $num;
        # Push r and v values to the list @rv
        push(@rv, pdl($rnow,$vnow));
        # Exit the loop if vnow is not a finite number
        last unless(isfinite($vnow));
    }
    # Return a list of r and v values, in units of r_sun and m/s
    return pdl(@rv) * pdl(1.0/$opt{r0},1e-3);
}

__END__

    for ($step=0; $step<$opt{steps};$step++){
        $vnow = rk4($rnow, $dr, $dydx, $vnow);
        $rnow += $dr;
        push(@rv, pdl($rnow,$vnow));
    }
    return pdl(@rv) * pdl(1.0/$opt{r0},1e-3);


}
