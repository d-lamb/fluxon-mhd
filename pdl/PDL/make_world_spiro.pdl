=head2 make_world - given a list of lines, make a world.

=for ref

You feed in a list of pdls, one pdl per fluxon.  You get back a world
with default characteristics and two flux concentrations per fluxon (north
at the beginning, south at the end).

This file is part of FLUX 2.0, released 31-Oct-2007.

=cut

sub make_world_spiro {

  my $epsilon = 1e-9;

  my $opt = pop;

  my @lines = @_;
  push(@lines,$opt) and undef $opt unless UNIVERSAL::isa($opt,'HASH');
  ##push it back onto @lines if it isn't a hash

  my $photo=$opt->{photosphere1};
  ##$phot=(1,2,3,4,5,6,7) 
  ##1-type:0,none;1,plane;2,sphere
  ##2,3,4:origin of the plane or sphere
  ##5,6,7:normal to origin for a plane or radius,0,0 for a sphere
  my $or_h = $photo((3));

  my $radius=$opt->{radius};
  ##print "$radius \n";
  my $height=$opt->{height};

  my @out = "";


##GLOBAL FORCE name1 name2 ...
##Sets up the force laws that are to be used for this simulation. The
##names must be names of force laws that are compiled into the code
##(they're stored in a global array defined in physics.c). For simple
##NLFFF relaxations you probably want f_pressure_equi2, f_curvature,
##and f_vertex.

  push(@out, "GLOBAL FORCES f_pressure_equi2b f_curvature f_vertex4");

##GLOBAL BOUNDARY x1 x2 x3 n1 n2 n3 type
##Declares high-beta line-tied boundary at the specified location,
##with the specified type. Note that nothing prevents you from placing
##naked flux concentrations anywhere in space -- the boundary merely
##has the property of being impenetrable to fluxons. The x and n
##vectors are parameters used to specify the surface. The type is as
##follows:

##sphere: x is the center of the sphere; n1 is its radius. n2 and n3
##are ignored.  
##cyl: x is the center of the cylinder(always 0,0,0); n1 is its radius

##  push(@out, "GLOBAL BOUNDARY SPHERE 0 0 0 1");
  push(@out, "GLOBAL BOUNDARY PLANE 0 0 0 0 0 1");
  push(@out, "GLOBAL B2 CYL 0 0 0 ".$radius." 0 0");

##GLOBAL OPEN x1 x2 x3 r auto
##Sets the source surface for a spherical open boundary condition:
##fluxons with OPEN endpoints are forced to end on the surface of a
##sphere centered at x, with radius r. The auto flag should be 1 for
##automatic opening (by cut) of fluxons that cross the open boundary,
##or 0 for no automatic opening.

##  push(@out, "GLOBAL OPEN 0 0 0 ".($opt->{rmax}+1)) if($opt->{rmax});
  push(@out, "GLOBAL OPEN 0 0 0 ".$height." 1");
  push(@out,"");

  my $j=100;
  my $ln=0;
  my $i=0;

  foreach $l(@lines) {
      my $line=$l->copy;
    my $fc0, $fc1, $fl;

    $rstart = sqrt(sum($line->(:,(0)) * $line->(:,(0))));
    $rend   = sqrt(sum($line->(:,(-1)) * $line->(:,(-1))));

    ##print $rend."\n";
    ##print "begin $rstart, end $rend, ";

    if ($line->((2),(0)) < $or_h){
	until ($line->((2),(1)) > $or_h){
	    $line=$line(:,1:-1);
	    ##chop off first, although this should be 
	    ##the case already if you use shoot_line
	}
	$line->((2),(0)) .= $or_h;
	##cludge for now, really need an interpolation along the line from prev to next vertex, don't want to think about it right now though.
    }
    if ($line->((2),(-1)) < $or_h){
	until ($line->((2),(-2)) > $or_h){
	    $line=$line(:,0:-2);
	    ##chop off last, although this should be 
	    ##the case already if you use shoot_line
	}
	$line->((2),(-1)) .= $or_h;
	##cludge for now, really need an interpolation along the line from prev to next vertex, don't want to think about it right now though.
    }
    


    if ($rend >= ($height-$epsilon)){
	##the outer point is beyond the open surface
	    while (sqrt(sum($line->(:,(-2)) * $line->(:,(-2)))) >= ($height-$epsilon)){
		$line=$line(:,0:-2);
		##print sqrt(sum($line->(:,(-1))**2))."\n"; 
               ##chop off last vertex
	    }
	    ##print sqrt(sum($line->(:,(-1))**2))."    ";
	    $line->(:,(-1))*=($height-.01)/$rend;
	    ##print sqrt(sum($line->(:,(-1)) * $line->(:,(-1)))),$line->(:,(-1)), $i."\n";	    
	    ##print "here   ".sqrt(sum($line->(:,(-1))**2))."\n";
	    ##print "sqrt(sum($line->(:,(-1)) * $line->(:,(-1)))) \n";
	    ##scale the length of the last vertex to be on
	    ##the sphere. going to be open boundary so it doesn't
	    ##matter where on the boundary it is
    }
       

##NEW label x1 x2 x3 flux
##Creates a new flux concentration with the given label (label should
##be an integer), located at x, with the given amount of magnetic flux
##(positive or negative). If a flux concentration already exists with
##that label, then it moves the old one to the new location. The flux
##parameter is stored in the FLUX_CONCENTRATION structure, but has no
##direct effect on the simulation -- it is intended for bookkeeping
##the values of the fluxons that come into and/or out of the flux
##concentration. By convention, positive flux concentrations are
##sources that should serve as fluxon beginnings, and negative ones
##are sinks that should serve as fluxon ends -- but the code does not
##enforce that directionality. The first 99 negative flux
##concentration labels are reserved (-1 through -99) and should not be
##used!

##LINE label fc1 fc2 flux
##Creates a fluxon with the given label (label should be an integer),
##starting at the flux concentration labeled fc1 and ending at the
##flux concentration labeled fc2. The first few negative flux
##concentration labels are special and are used for open and plasmoid
##fluxons. To make a fluxon that is open at the beginning, fc1 should
##be -1. To make a fluxon that is open at the end, fc2 should be
##-2. To make a fluxon that is a plasmoid, fc1 should be -3 and fc2
##should be -4.

##VERTEX fluxon label pos x1 x2 x3
##Creates a new vertex on the given fluxon, with unique label label
##(should be an integer), at position pos counting from the start of
##the fluxon. The start and end points of the fluxon are defined
##implicitly and don't need to be declared. The first nontrivial
##vertex is at position 1.

    $open_start = ($rstart >= $height-$epsilon);
    $open_end   = ($rend   >= $height-$epsilon);
    ##print "$open_start, $open_end\n";


    ##only make the fc if the fluxon starts/ends on the planar
    ##photopshere. Open boundaries don't count as numbered fc's

    unless($open_start){
      push(@out,sprintf("NEW %d %9.3g %9.3g %9.3g 1",
			($fc0=$j++),
			$line->at(0,0), $line->at(1,0), $line->at(2,0)
			)
	   );
    }

    unless($open_end){
      push(@out,sprintf("NEW %d %9.3g %9.3g %9.3g -1",
			($fc1=$j++),
			$line->at(0,-1), $line->at(1,-1), $line->at(2,-1)
			)
	   );
    }
    
    push(@out,sprintf("LINE %d %d %d 1",
		      ($fl = $j++),  
		      ($open_start ? -1 : $fc0),   
		      ($open_end ? -2 : $fc1)
		      )
	 );
    $ln++;
    for $k(1..$line->dim(1)-2) {
     ## print "line $ln; k=$k\n";
      push(@out,sprintf("VERTEX %d %d %d %9.4g %9.4g %9.4g",
			$fl,
			$j++,
			$k,
			$line->(:,($k))->list
			)
	   );
    }
    push(@out,"");
    $i++;
  }
  join("\n",@out);
}
