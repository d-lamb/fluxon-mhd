use PDL::Transform;
use PDL::NiceSlice;
use Flux;
use strict;
use warnings;
use PDL;

=head2 rotation_spiro - rotation profile for monopole

=for usage

To use this code, the input looks like this"

rotation_spiro($world,$t,$delta_t,$B_z[,\%options]);

=item $world

The flux world variable that you want the velocity to work on

=item $t

The initial time before the rotation. You will need to increas this by
$delta_t after the rotation to keep it current (is there a way I can
update it in this code?)

In the smooth code, you don't really need this, as the rotation is constant.

=item $delta_t

timestep

=item $B_z

This is a code-ref (subroutine that acts as a piddle) that returns the
z-component of the magnetic field given an input of the position as an
array.

=for ref

This subroutine uses interp_duction to rotate the central pole in the
simple system with a monopole that is rotating embedded in a uniform
stationary field. This system is meant to simulate coronal jets and
small plumes.

This routine uses a velocity of the form:

V_perp = A * f(t) * g(B_z,z) 

so it needs a time. It also needs a timestep because it does a step of
the form. This one has a constant roation in time.

position_f = position_i + (v_perp * delta_t).

This subroutine determines how the vertices and the flux
concentrations move on the photosphere and interp_duction figures out
how to move the rest of the vertices accordingly.

It creates a 3x2xn array of piddles to feed into interp_duction with
the before/after positions (3x2) and one for each vertex that is moved
(n). It also feeds in all of the vertices to interp_duction so that it
can determine where the vertices above the photosphere need to move.

This file was created by Laurel Rachmeler Jan-10-2008 as part of FLUX
2.0

=cut


sub rotation_spiro {
    use constant PI=>acos(-1);

    ##inputs
    my $world = shift;
    my $t = shift;
    my $dt = shift;
    my $b_z = shift;
    if (!$b_z) {print "no bz given to rotation_spiro!"; return 0;}
    my $opt = shift;

    ##constants
    my $tl = 100;
    my $tr = 1100;
    my $bl = 0.1;
    my $br = 13;
    my $v0 = 3.7e-5;
    my $kb = 15; ##boltzman constant (?) (I did use 1.3807e-16 and multiplied vperp by 1e19. change to 15 to correspond to etienne's.

    my $mu_not = $opt->{mu0} || 4*PI;
    my $m_not = $opt->{m0} || 25;
    my $z_not = $opt->{z0} || -1.5;

    my $factor=$mu_not * $m_not / (4. * PI);

    ## list of the vertices to move (all red/final polarities on the
    ## photosphere) spot fluxons are the ones associated with the
    ## opposite polarity spot, and don't ever connect to the open
    ## boundary

    my @valid_fluxons = grep( $_ ->{label} > 0, $world->fluxons);
    my @spot_fluxons = grep ($_->{end}->{x}->(2) <= 0.01, @valid_fluxons);
##    print @spot_fluxons;
    my @rotating = map { $_->{end} } @spot_fluxons;
##    print @rotating;
    my @stationary = map {$_->vertex(0)} @valid_fluxons;
##    print @stationary;

    my @xi;
    my @xf;

    foreach my $v(@rotating){

	## the velocity
        my $bz = &$b_z($v->{x});
        my $x = $v->{x};


        my $z = ($x((2))-$z_not)**2;
        my $x2y2 = $x((0))**2 + $x((1))**2;
        my $denom = $x2y2 + $z;

        my $cross =$factor *
            pdl((5 * $x((1)) * (2*$z - $x2y2 )) / ($denom**(7/2)) + 
                2*$x((1)) / ($denom**(5/2)),
                -((5 * $x((0)) * (2*$z - $x2y2)) / ($denom**(7/2)) + 
                  2*$x((0)) / ($denom**(5/2)) ),
                0);
	
=pod

	my $cross = pdl([$factor * (
			     (5 * $x((1)) * (2*($x((2))-$z_not)**2 - $x((0))**2 - $x((1))**2)) / 
			     (($x((0))**2 + $x((1))**2 + ($x((2))-$z_not)**2)**(7/2)) + 
			     2*$x((1)) / (($x((0))**2 + $x((1))**2 + ($x((2))-$z_not)**2)**(5/2)) ),
			 $factor * -1  * (
			     (5 * $x((0)) * (2*($x((2))-$z_not)**2 - $x((0))**2 - $x((1))**2)) / 
			     (($x((0))**2 + $x((1))**2 + ($x((2))-$z_not)**2)**(7/2)) + 
			     2*$x((0)) / (($x((0))**2 + $x((1))**2 + ($x((2))-$z_not)**2)**(5/2)) ),
			 0]);
=cut

        my $v_perp = $v0 * 0.08 $dt
            * $kb * ( ($br - $bl) / $bz )
            * tanh($kb * ($bz - $bl) / ($br - $bl)) 
            * $cross;

        my $x_f = $x + $v_perp * $dt; ##this line was my idea. Craig
				      ##suggested rk4 as an alternate
				      ##and I agree that it would give
				      ##more precise results; will try
				      ##is soon, want to get this
				      ##slightly working first though	

	push @xi, $x;
	push @xf, $x_f;

    }

    ##print  @xi, "\n";
    ##print  @xf ,'\n';

    ##dummy makes $xi from 3xn to a 3x1xn (same for $xf) then glue
    ##stickes them together along this dummy dimension with xi first
    ##followed by xf. In the end we want 3x2xn;
    my $duction_rot = pdl(@xi)->dummy(1)->glue(1,pdl(@xf)->dummy(1));

   ## print $duction_rot;

    my $duction_stat = pdl( map{ $_->{x} } @stationary );
    $duction_stat = $duction_stat->dummy(1)->glue(1,$duction_stat->dummy(1));

    my $duction = $duction_rot->glue(2,$duction_stat);

    for my $v($world->vertices){
	$v->{x} = interp_duction($duction,$v->{x});
    }

    for my $c($world->concentrations){
	$c->{x} = interp_duction($duction,$c->{x});
    }
    print "ROTATION COMPLETE\n";
}


