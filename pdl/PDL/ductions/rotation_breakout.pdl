use PDL::Transform;
use PDL::NiceSlice;
use Flux;
use strict;
##no strict "vars";
use warnings;
use PDL;

=head2 rotation_breakout - rotation profile for monopole

=for usage

To use this code, the input looks like this"

rotation_breakout($world,$delta_t,$B_r[,\%options]);

=item $world

The flux world variable that you want the velocity to work on

=item $delta_t

timestep

=item $B_r

This is a code-ref (subroutine that acts as a piddle) that returns the
r-component of the magnetic field given an xyz input of the position as an
array.

=for ref

This subroutine uses interp_duction to rotate the central pole in the
simple system with a monopole that is rotating embedded in a uniform
stationary field. This system is meant to simulate coronal jets and
small plumes.

This routine uses a velocity of the form:

V_perp = A * f(t) * g(B_z,z) 

so it needs a time. It also needs a timestep because it does a step of
the form

position_f = position_i + (v_perp * delta_t).

This subroutine determines how the vertices and the flux
concentrations move on the photosphere and interp_duction figures out
how to move the rest of the vertices accordingly.

It creates a 3x2xn array of piddles to feed into interp_duction with
the before/after positions (3x2) and one for each vertex that is moved
(n). It also feeds in all of the vertices to interp_duction so that it
can determine where the vertices above the photosphere need to move.

This file was created by Laurel Rachmeler Jan-10-2008 as part of FLUX
2.0

=cut


sub rotation_breakout {
    use constant PI=>acos(-1);

    ##inputs
    my $world = shift;
    my $dt = shift;
    my $b_r = shift;
    if (!$b_r) {print "no br given to rotation_spiro!"; return 0;}
    my $opt = shift;
    my $B_1=$opt->{B_1};
    my $B_2=$opt->{B_2};
    my $B_0=$opt->{B_0};
    my $d=$opt->{d};
    my $ar_center=$opt->{ar_center};
    my $vph0=$opt->{vph0};
    my $vo=$opt->{vo};

    ##p "here";

    ##constants, initiated outside
    ##$B_1;## = 2.4;
    ##$B_2 = 3.2;
    ##$vo = 9.3e15;
    ##$vph0 = PI/8;
    ##$B_0 = 5;
    ##p $B_1,$B_2, $vo, $vph0,$B_0;

    ## list of the vertices to move (all initial final polarities of
    ## the spot fluxons) spot fluxons are the ones associated with the
    ## active region. for spot fluxons, use the same method as for
    ## imaging, if start is within a certain (emprical) distance of
    ## the active region center.

    my @valid_fluxons = grep( $_ ->{label} > 0, $world->fluxons);

    my @spot_fluxons_e = grep (
	sqrt(sum(($_->{end}->{x}-$ar_center)**2)) <= $d, @valid_fluxons);
    my @rotating_e = map { $_->{end} } @spot_fluxons_e;


    my @spot_fluxons_s = grep (
	(sqrt(sum(($_->{start}->{x}-$ar_center)**2)) <= $d), @valid_fluxons);
    my @rotating_s = map { $_->{start} } @spot_fluxons_s;

    my @rotating=@rotating_e;
    push ( @rotating, @rotating_s);
    
    ##print @rotating_s,"\n", @rotating_e,"\n", @rotating,"\n";
    my @stationary_e = grep (
	(sqrt(sum(($_->{end}->{x}-$ar_center)**2)) > $d) , @valid_fluxons);
    my @stationary_ev = map { $_->{end} } @stationary_e;
    my @stationary_s = grep (
	(sqrt(sum(($_->{start}->{x}-$ar_center)**2)) > $d), @valid_fluxons);
    my @stationary_sv = map { $_->{start} } @stationary_e;
    
    my @stationary=@stationary_ev;
    push (@stationary, @stationary_sv);

    my @xi;
    my @xf; 

    foreach my $v(@rotating){
	##p $v->{label},"   ";
	##p "label=",$v->{label},"dist=", sqrt(sum($v->{x}-$ar_center)**2);
	##p "dist=", sqrt(sum($v->{x}-$ar_center)**2);
	##p $v->{x},"\n";
        my $br = &$b_r($v->{x});
	##print $br, "\n";
        my $x = $v->{x};
	my $r=1;
	my $th=atan2(sqrt($x->((0))**2+$x->((1))**2),$x->((2)));
	my $ph=atan2($x->((1)),$x->((0)));
	my $lat = (PI/2)-$th;
	my $xrtp=pdl($r, $th, $ph);
	##print 90-$th*180/PI, $ph*180/PI,"\n";

	my $A=1-($lat/$vph0)**2-($ph/$vph0)**2;

	my $x_f;
	if ($A > 0){
	    my $sgn=$lat<=>0;
	    
	    my $dbr_dp=-1*(abs($lat/$vph0)**.25)*$A**(-3/4)*($ph)/(2*$vph0*$vph0);
	   ##print $A,($lat/$vph0)**2,(($ph)/$vph0)**2,$A**(3/4),"\n";
	    my $dbr_dt1=$lat*$A**(-3/4)*(abs($lat/$vph0)**.25)/(2*$vph0*$vph0);##*$sgn;
	    my $dbr_dt2=$A**(.25)*(abs($lat/$vph0)**(-3/4))/(4*$vph0)*$sgn;
	    my $tfront;
	    if ($br>0){ ##because of sign change of constants.
		$tfront=$vo*$B_0*(1-cos(PI*($br-$B_1)/($B_2-$B_1)))*$sgn;
		##p $vo, $B_0, $br, $B_1, $B_2,"\n"
	    } else {
		$tfront=-1*$vo*$B_0*(1-cos(PI*($br+$B_1)/(-1*$B_2+$B_1)))*$sgn;
	    }
	    ##p $tfront,"\n";
	    my $tback1=(-1)*$dbr_dp/sin($th);

	    my $tback2=$dbr_dt1 - $dbr_dt2;
	    
	    my $vel=$tfront*pdl(0,$tback1,$tback2);
	    ##print $dbr_dt1,$dbr_dt2, $tback2, "\n";
	    
	    my $xrtp_f = $xrtp + $vel * $dt;
            ##should probably use rk4 instead...
	    ##$xrtp_f(2).=PI/2-$xrtp_f(2);
	    ##print "good","rms=",sqrt(sum(($v*$dt)**2)),"\n";

	    $x_f=pdl(sin($xrtp_f->((1)))*cos($xrtp_f->((2))),
		     sin($xrtp_f->((1)))*sin($xrtp_f->((2))),
		     cos($xrtp_f->((1)))    );
	} else {
	    $x_f=$x;
	    ##print "not good\n";
	}

	push @xi, $x;
	push @xf, $x_f;


    }

    ##print  @xi, "\n";
    ##print  @xf ,'\n';

    ##dummy makes $xi from 3xn to a 3x1xn (same for $xf) then glue
    ##stickes them together along this dummy dimension with xi first
    ##followed by xf. In the end we want 3x2xn;
    my $duction_rot = pdl(@xi)->dummy(1)->glue(1,pdl(@xf)->dummy(1));

   ## print $duction_rot;

    my $duction_stat = pdl( map{ $_->{x} } @stationary );
    $duction_stat = $duction_stat->dummy(1)->glue(1,$duction_stat->dummy(1));
 
    my $duction = $duction_rot->glue(2,$duction_stat);

    for my $v($world->vertices){
	$v->{x} = interp_duction($duction,$v->{x});
    }

    for my $c($world->concentrations){
	$c->{x} = interp_duction($duction,$c->{x});
    }
    print "ROTATION COMPLETE\n";
}


