=head2 random_colors - generate a random color set for a fluxon field

=for usage

$rgb_fluxons = random_colors($world,\%opt);

=for ref

Generates a list of random fluxon colors to be used in rendering a world.
The output is suitable for use as the rgb_fluxons parameter in render_world().

Useful options are:

=over 3

=item hr

The "hue range" (hues go from 0 to 1) around the color wheel (default: 0-1)  If you specify 
"red", "green", or "blue" you get an appropriate region of the hue wheel.

=item sr

The "saturation range" (saturation from 0 to 1); this is *relative* saturation, not 
absolute saturation.

=item vr

The "luminance range" (from 0 to 1).  Note that this affects saturation:  strongly saturated
colors are only available near 0.5.  

=item old

If you want to augment an old colormap to accomodate new fluxons, supply the old colormap here.

=back

This file is part of FLUX 2.0, released 31-Oct-2007.

=cut

use PDL::NiceSlice;

sub random_colors {
    my $world = shift;
    my $opt = shift;
    my $fluxons = [];
    $opt = {} unless defined($opt);
    $opt->{old} = {} unless defined($opt->{old});

    for my $f(map { $_->{label} } $world->fluxons) {
	if( exists $opt->{old}->{$f} ) {
	    $rgb_out->{$f} = $opt->{old}->{$f}->copy;
	} else {
	    push(@$fluxons, $f);
	}
    }

    $hr_lookup = {
	red=>[0.33,0.43],
	blue=>[0,0.1],
	green=>[0.8,0.9]
	};

    my $hr = $hr_lookup->{$opt->{hr}} || $opt->{hr} || [0,1.0];

    my $sr = $opt->{sr} || [0,1.0];
    my $vr = $opt->{vr} || [0.5,1.0];

    my $rgb_out = {};
    
    my $hsvr = pdl($hr,$sr,$vr);

    my $hsv = random(3,0+@$fluxons) * ($hsvr->((1))-$hsvr->((0))) + $hsvr->((0));

    my $vvec  = $hsv->((2),*3)->copy;


    my $sinh = sin(3.14159 * 2 * $hsv->((0)));
    my $cosh = cos(3.14159 * 2 * $hsv->((0)));
    
    my $vhat = pdl(1,1,1); # not really a hat...

    my $hhat = pdl(-1,0,1) * $cosh->(*1) + pdl(0,-1,1) * $sinh->(*1);

    # Calculate the range of saturation lengths for each of the 
    # (H,V) pairs -- this scales S.
    my $trial_vecs = $hhat*3;
    my $trials = $trial_vecs + $vvec;
    my $pos_ratios = ($trials - 1)/abs($trial_vecs+0.00001);
    my $maxpos = maximum($pos_ratios);
    my $neg_ratios = (-$trials) /abs($trial_vecs+0.00001);
    my $maxneg = maximum($neg_ratios);
    my $ratio = maximum(pdl($maxpos,$maxneg)->mv(1,0));
    my $s_scale = 3*(1.0-$ratio);
    
    print "hsv: ",join("x",$hsv->dims),"; hhat: ",join("x",$hhat->dims),"; sscale: ",join("x",$s_scale->dims),"\n";
    my $rgb = $vvec + $s_scale->(*1) * $hsv->(1) * $hhat;

    for my $i(0..$#$fluxons) {
	$rgb_out->{$fluxons->[$i]}= floor(0.5 + 1000 * $rgb->(:,($i))+0.5)/1000;
    }
    return $rgb_out;
}
    
    
    
    
    

    


    
