sub simple_relaxer {
    $w = shift;
    $interactive = shift || 0;
    $global = shift || 0;
    $n=shift||0;
    $opt = shift || {};
    $auto = $opt->{auto};
    $movie_n = $opt->{movie_n};
    $movie_f = $opt->{movie_f} || "flux-movie-%4.4d.ppm";
    $disp_n = $movie_n || $opt->{disp_n} || 10;

    $step=0 unless($n);
    $final_step=$n;

#    $w = read_world($w)
#      unless(ref $w) ;

    if($step==0) {
      print "Initializing neighbors...";      
      $w->update_neighbors(1);
      print "ok\n";
    }

    $w->render_lines;
    
    $dt = 0.1 unless defined($dt);
    
    while(!$final_step || $step<$final_step) {


	$w->update_neighbors($global);
	$fmax = $w->update_force($global);

	$w->relax_step($dt);
	$t += $dt;

	$h = $w->stats;
	
	printf(" time is now %10.4g (%d vertices; fmax=%7.3g, f_av=%7.3g, fs_av=%7.3g, n_av=%7.3g)\n",$t,$h->{n},$h->{f_ma},$h->{f_av},$h->{fs_av},
	$h->{n_av});

	if($auto) {	
	   $dt0 = $dt unless(defined $dt0);
	   $ratio = $h->{f_av}/$h->{fs_av};
	   $dt = $dt0 * $ratio;
	   print "\t\tratio=$ratio; new dt=$dt\n";
	}

	unless($step % $disp_n ) {
	    $w->render_lines($interactive,$range,$opt->{render_opt} || {label=>0}); #{hull=>1,neighbors=>1,nscale=>1});
	    if($movie_n) {
	      my $pic = grabpic3d();
	      my $fname = sprintf($movie_f,$step);
	      wpic($pic,$fname);
	      print "wrote $fname...\n";
	    }
	}

#	unless($step % 100) {
#	    $w->fix_proximity(1);
#	    $w->fix_curvature(0.2);
#        }

	print "step $step..."; 
	$step++;
	
#	print "Press <RETURN> for next step:";
#	$a = <STDIN>;

    }	
}

1;
